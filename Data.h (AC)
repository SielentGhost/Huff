#pragma once
#include <stdio.h>
#include <stdlib.h>
#define BITS_IN_REGISTER 16
#define TOP_VALUE (((long) 1 << BITS_IN_REGISTER) - 1)
#define FIRST_QTR (TOP_VALUE / 4 + 1)
#define HALF (2 * FIRST_QTR)
#define THIRD_QTR (3 * FIRST_QTR)
#define NO_OF_CHARS 256
#define EOF_SYMBOL (NO_OF_CHARS + 1)
#define NO_OF_SYMBOLS (NO_OF_CHARS + 1)
#define MAX_FREQUENCY 16383
unsigned char index_to_char[NO_OF_SYMBOLS];
int char_to_index[NO_OF_CHARS];
int cum_freq[NO_OF_SYMBOLS + 1];
int freq[NO_OF_SYMBOLS + 1];
long low, high;
long value;
long bits_to_follow;
int buffer;
int bits_to_go;
int garbage_bits;
FILE *in, *out;
void start_model(void) {
	for (int i = 0; i < NO_OF_CHARS; i++) {
		char_to_index[i] = i + 1;
		index_to_char[i + 1] = i;
	}
	for (int i = 0; i <= NO_OF_SYMBOLS; i++) {
		freq[i] = 1;
		cum_freq[i] = NO_OF_SYMBOLS - i;
	}
	freq[0] = 0;
}
void update_model(int symbol) {
	int i;
	int ch_i, ch_symbol;
	int cum;
	if (cum_freq[0] == MAX_FREQUENCY) {
		cum = 0;
		for (i = NO_OF_SYMBOLS; i >= 0; i--) {
			freq[i] = (freq[i] + 1) / 2;
			cum_freq[i] = cum;
			cum += freq[i];
		}
	}
	for (i = symbol; freq[i] == freq[i - 1]; i--);
	if (i < symbol) {
		ch_i = index_to_char[i];
		ch_symbol = index_to_char[symbol];
		index_to_char[i] = ch_symbol;
		index_to_char[symbol] = ch_i;
		char_to_index[ch_i] = symbol;
		char_to_index[ch_symbol] = i;
	}
	freq[i]++;
	while (i > 0)
	{
		i--;
		cum_freq[i]++;
	}
}
